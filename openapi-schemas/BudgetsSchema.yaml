openapi: 3.0.3
info:
  title: Title
  description: Title
  version: 1.0.0
servers:
  - url: 'http://localhost:8980/budget' # todo https?

#  TODO make separate API for budget categories
paths:
  /{userId}/budgets:
    get:
      operationId: getUncategorizedBudgets
      description: "Get budgets without an assigned category for a given user."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
            text/plain:
              schema:
                type: string
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /{userId}/categories:
    get:
      operationId: getCategories
      description: "Get categories for given user."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budgets/{categoryId}:
    get:
      operationId: getAllByCategoryId
      description: "Get budgets by parent category id."
      parameters:
        - name: categoryId
          in: path
          description: "Parent category id."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /categories/{parentId}:
    get:
      operationId: getCategoriesByParentId
      description: "Get categories by parent id."
      parameters:
        - name: parentId
          in: path
          description: "Id of the parent category."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /{userId}/category/{name}:
    get:
      operationId: getCategoryByName
      description: "Get budget category by name."
      parameters:
        - name: name
          in: path
          description: "Budget category name."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /category/{id}:
    get:
      operationId: getCategoryById
      description: "Get budget category by id."
      parameters:
        - name: id
          in: path
          description: "Budget category d."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /{userId}/budget/{name}:
    get:
      operationId: getByName
      description: "Get budget by name for given user."
      parameters:
        - name: name
          in: path
          description: "Budget name."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /addCategory:
    post:
      operationId: addCategory
      description: "Add a new budget category."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCategoryDTO"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /updateCategory:
    post:
      operationId: updateBudgetCategory
      description: "Update given budget category."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/BudgetCategoryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /{userId}/budgetFavorites:
    get:
      operationId: getBudgetFavorites
      description: "Get list of budgets marked by user as favorite."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                 $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /add:
    post:
      operationId: addBudget
      description: "Add a new budget to category or a new top-level budget."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetDTO"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /update:
    post:
      operationId: updateBudget
      description: "Update given budget."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/BudgetDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /{userId}/categories/delete/{categoryIds}:
    delete:
      operationId: deleteBudgetCategories
      description: "Delete budget categories with given ids."
      parameters:
        - in: path
          name: categoryIds
          required: true
          schema:
            type: array
            items:
              type: string
        - in: path
          name: userId
          description: "Id of the currently logged in user"
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /delete/{budgetIds}:
    delete:
      operationId: deleteBudgetsByIds
      description: "Delete budgets with given ids."
      parameters:
        - in: path
          name: budgetIds
          required: true
          schema:
            type: array
            items:
              type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string

components:
  schemas:
    BudgetCategoryDTO:
      description: "Budget category. A null name means a new uncategorized budget."
      required:
        - userId
        - name
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        subcategories:
          type: array
          items:
            $ref: "#/components/schemas/BudgetCategoryDTO"
        budgets:
          type: array
          items:
            $ref: "#/components/schemas/BudgetDTO"
        parentCategoryId:
          type: string
    BudgetDTO:
      required:
        - name
        - investment
        - userId
      properties:
        id:
          type: string
        name:
          type: string
        budgetEntries:
          type: array
          items:
            $ref: "./EntrySchema.yaml#/components/schemas/EntryDTO"
        investment:
          type: boolean
        userId:
          type: string
        categoryId:
          type: string
