openapi: 3.0.0
info:
  title: My API
  version: 1.0.0
servers:
  - url: 'http://localhost:8980'
paths:
  /budget/{userId}/budgets:
    get:
      operationId: getUncategorizedBudgets
      description: "Get budgets without an assigned category for a given user."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
            text/plain:
              schema:
                type: string
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/budgets/all:
    get:
      operationId: getBudgets
      description: "Get all budgets for a given user, filtered by investment type or not."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
        - name: fetchType
          in: query
          description: "Specifies whether all, investment or non-investment budgets should be fetched."
          required: true
          schema:
            $ref: "#/components/schemas/FetchType"
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
            text/plain:
              schema:
                type: string
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/budget/{name}:
    get:
      operationId: getByName
      description: "Get budget by name for given user."
      parameters:
        - name: name
          in: path
          description: "Budget name."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{budgetId}:
    get:
      operationId: getById
      description: "Get budget by id."
      parameters:
        - name: budgetId
          in: path
          description: "Budget id."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/budgets/{categoryId}:
    get:
      operationId: getAllByCategoryId
      description: "Get budgets by parent category id."
      parameters:
        - name: categoryId
          in: path
          description: "Parent category id."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/categories:
    get:
      operationId: getCategories
      description: "Get categories for given user, filtered or by investment type or not."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
        - name: fetchType
          in: query
          description: "Specifies whether all, investment or non-investment categories should be fetched."
          required: true
          schema:
            $ref: "#/components/schemas/FetchType"
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/category/{name}:
    get:
      operationId: getCategoryByName
      description: "Get budget category by name."
      parameters:
        - name: name
          in: path
          description: "Budget category name."
          required: true
          schema:
            type: string
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/category/{id}:
    get:
      operationId: getCategoryById
      description: "Get budget category by id."
      parameters:
        - name: id
          in: path
          description: "Budget category d."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/categories/{parentId}:
    get:
      operationId: getCategoriesByParentId
      description: "Get categories by parent id."
      parameters:
        - name: parentId
          in: path
          description: "Id of the parent category."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetCategoryDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/addCategory:
    post:
      operationId: addCategory
      description: "Add a new budget category."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetCategoryDTO"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/updateCategory:
    post:
      operationId: updateBudgetCategory
      description: "Update given budget category."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/BudgetCategoryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/budgetFavorites:
    get:
      operationId: getBudgetFavorites
      description: "Get list of budgets marked by user as favorite."
      parameters:
        - name: userId
          in: path
          description: "Id of the currently logged in user."
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BudgetDTO"
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/add:
    post:
      operationId: addBudget
      description: "Add a new budget to category or a new top-level budget."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BudgetDTO"
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
  /budget/update:
    post:
      operationId: updateBudget
      description: "Update given budget."
      tags:
        - budget
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/BudgetDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/{userId}/categories/delete/{categoryIds}:
    delete:
      operationId: deleteBudgetCategories
      description: "Delete budget categories with given ids."
      parameters:
        - in: path
          name: categoryIds
          required: true
          schema:
            type: array
            items:
              type: string
        - in: path
          name: userId
          description: "Id of the currently logged in user"
          required: true
          schema:
            type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /budget/delete/{budgetIds}:
    delete:
      operationId: deleteBudgetsByIds
      description: "Delete budgets with given ids."
      parameters:
        - in: path
          name: budgetIds
          required: true
          schema:
            type: array
            items:
              type: string
      tags:
        - budget
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/add:
    post:
      operationId: addEntry
      description: "Add a new entry."
      tags:
        - entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/EntryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/investment/add:
    post:
      operationId: addInvestmentEntry
      description: "Add a new investment entry."
      tags:
        - entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/InvestmentEntryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/update:
    post:
      operationId: updateEntry
      description: "Update given entry."
      tags:
        - entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/EntryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/investment/update:
    post:
      operationId: updateInvestmentEntry
      description: "Update given investment entry."
      tags:
        - entry
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref:
                '#/components/schemas/InvestmentEntryDTO'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/delete/{ids}:
    delete:
      operationId: deleteEntriesByIds
      description: "Delete entries with given ids."
      parameters:
        - in: path
          name: ids
          required: true
          schema:
            type: array
            items:
              type: string
      tags:
        - entry
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /users/add:
    post:
      operationId: addUser
      description: "Add a new user account to the database"
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDTO"
      responses:
        "200":
          description: OK
  /entry/{budgetId}/entries:
    get:
      operationId: getEntriesByBudgetId
      description: "Get entries for budget with the given id."
      parameters:
        - name: budgetId
          in: path
          description: "Id of the budget."
          required: true
          schema:
            type: string
      tags:
        - entry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/EntryDTO"
            text/plain:
              schema:
                type: string
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /entry/{budgetId}/investment/entries:
    get:
      operationId: getInvestmentEntriesByBudgetId
      description: "Get investment entries for budget with the given id."
      parameters:
        - name: budgetId
          in: path
          description: "Id of the budget."
          required: true
          schema:
            type: string
      tags:
        - entry
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/InvestmentEntryDTO"
            text/plain:
              schema:
                type: string
        "500":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /analysis/expenses/balance/{startDate}/{endDate}/{budgetId}:
    get:
      operationId: getExpenseBalanceByPeriodAndId
      description: "Get expense/income balance for a given month and budget."
      parameters:
        - name: startDate
          in: path
          description: "Start date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: path
          description: "End date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: budgetId
          in: path
          description: "Id of the given budget."
          required: true
          schema:
            type: string
      tags:
        - budget-analysis
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
  /analysis/sum/expenses/subcategories/{startDate}/{endDate}/{budgetCategoryId}:
    get:
      operationId: getTotalExpensesForSubcategoriesAndPeriodByCategoryId
      description: "Get total expenses for direct subcategories of a category with given id."
      parameters:
        - name: startDate
          in: path
          description: "Start date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: path
          description: "End date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: budgetCategoryId
          in: path
          description: "Id of the given budget category."
          required: true
          schema:
            type: string
      tags:
        - budget-analysis
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubcategoryExpenseSumDTO'
  /analysis/expenses/sum/{startDate}/{endDate}/{budgetId}:
    get:
      operationId: getExpenseSumByPeriodAndId
      description: "Get expense sum for a given period and budget."
      parameters:
        - name: startDate
          in: path
          description: "Start date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: endDate
          in: path
          description: "End date of the period to be analyzed."
          required: true
          schema:
            type: string
            format: date
        - name: budgetId
          in: path
          description: "Id of the given budget."
          required: true
          schema:
            type: string
      tags:
        - budget-analysis
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
  /investments/analysis/profits/{date}/{budgetId}:
    get:
      operationId: getProfitByDateAndId
      description: "Get profit for given date and budget."
      parameters:
        - name: date
          in: path
          description: "Date for which profit should be calculated."
          required: true
          schema:
            type: string
            format: date
        - name: budgetId
          in: path
          description: "Id of the given budget."
          required: true
          schema:
            type: string
        - name: excludePurchasesFrom
          in: query
          description: "Any units bought after this date will be excluded from profit analysis."
          required: false
          schema:
            type: string
            format: date
      tags:
        - investment-analysis
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: number
components:
  schemas:
    BudgetCategoryDTO:
      description: "Budget category. A null name means a new uncategorized budget."
      required:
        - userId
        - name
        - investment
      properties:
        id:
          type: string
        userId:
          type: string
        name:
          type: string
        subcategories:
          type: array
          items:
            $ref: "#/components/schemas/BudgetCategoryDTO"
        budgets:
          type: array
          items:
            $ref: "#/components/schemas/BudgetDTO"
        parentCategoryId:
          type: string
        investment:
          type: boolean
    BudgetDTO:
      required:
        - name
        - investment
        - userId
      properties:
        id:
          type: string
        name:
          type: string
        budgetEntries:
          type: array
          items:
            $ref: "./EntrySchema.yaml#/components/schemas/EntryDTO"
        investment:
          type: boolean
        userId:
          type: string
        categoryId:
          type: string
    EntryDTO:
      required:
        - value
        - currency
        - name
        - userId
        - date
      properties:
        id:
          type: string
        value:
          type: number
        currency:
          $ref: "#/components/schemas/EntryCurrency"
        name:
          type: string
        entryType:
          $ref: "#/components/schemas/EntryType"
        userId:
          type: string
        budgetId:
          type: string
        date:
          type: string
          format: date
          example: "2022-01-01"
    EntryCurrency:
      type: string
      enum:
        - PLN
        - EUR
        - CHF
    EntryType:
      type: string
      default: expense
      enum:
        - income
        - expense
    UserDTO:
      required:
        - userId
      properties:
        userId:
          type: string
        password:
          type: string
    InvestmentEntryDTO:
      required:
        - entry
        - volume
        - marketPriceAtOperation
      properties:
        id:
          type: string
        entry:
          $ref: "#/components/schemas/EntryDTO"
        volume:
          type: integer
        marketPriceAtOperation:
          type: number
        datesToMarketPrices:
          type: object
          additionalProperties:
            type: number
    SubcategoryExpenseSumDTO:
      type: object
      required:
        - subcategoryName
        - expenseSum
      properties:
        subcategoryId:
          type: string
        subcategoryName:
          type: string
        expenseSum:
          type: number
    FetchType:
      type: string
      enum:
        - all
        - investmentOnly
        - nonInvestmentOnly

